/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef KademliaService_H
#define KademliaService_H

#include <TProcessor.h>
#include "kademlia_service_types.h"

namespace kad {

class KademliaServiceIf {
 public:
  virtual ~KademliaServiceIf() {}
  virtual void Ping(kad::PingResponse& _return, const kad::PingRequest& request) = 0;
  virtual void FindValue(kad::FindResponse& _return, const kad::FindRequest& request) = 0;
  virtual void FindNode(kad::FindResponse& _return, const kad::FindRequest& request) = 0;
  virtual void Store(kad::StoreResponse& _return, const kad::StoreRequest& request) = 0;
  virtual void Downlist(kad::DownlistResponse& _return, const kad::DownlistRequest& request) = 0;
  virtual void Bootstrap(kad::BootstrapResponse& _return, const kad::BootstrapRequest& request) = 0;
  virtual void Delete(kad::DeleteResponse& _return, const kad::DeleteRequest& request) = 0;
  virtual void Update(kad::UpdateResponse& _return, const kad::UpdateRequest& request) = 0;
};

class KademliaServiceNull : virtual public KademliaServiceIf {
 public:
  virtual ~KademliaServiceNull() {}
  void Ping(kad::PingResponse& /* _return */, const kad::PingRequest& /* request */) {
    return;
  }
  void FindValue(kad::FindResponse& /* _return */, const kad::FindRequest& /* request */) {
    return;
  }
  void FindNode(kad::FindResponse& /* _return */, const kad::FindRequest& /* request */) {
    return;
  }
  void Store(kad::StoreResponse& /* _return */, const kad::StoreRequest& /* request */) {
    return;
  }
  void Downlist(kad::DownlistResponse& /* _return */, const kad::DownlistRequest& /* request */) {
    return;
  }
  void Bootstrap(kad::BootstrapResponse& /* _return */, const kad::BootstrapRequest& /* request */) {
    return;
  }
  void Delete(kad::DeleteResponse& /* _return */, const kad::DeleteRequest& /* request */) {
    return;
  }
  void Update(kad::UpdateResponse& /* _return */, const kad::UpdateRequest& /* request */) {
    return;
  }
};

typedef struct _KademliaService_Ping_args__isset {
  _KademliaService_Ping_args__isset() : request(false) {}
  bool request;
} _KademliaService_Ping_args__isset;

class KademliaService_Ping_args {
 public:

  KademliaService_Ping_args() {
  }

  virtual ~KademliaService_Ping_args() throw() {}

  kad::PingRequest request;

  _KademliaService_Ping_args__isset __isset;

  bool operator == (const KademliaService_Ping_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_Ping_pargs {
 public:


  virtual ~KademliaService_Ping_pargs() throw() {}

  const kad::PingRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Ping_result__isset {
  _KademliaService_Ping_result__isset() : success(false) {}
  bool success;
} _KademliaService_Ping_result__isset;

class KademliaService_Ping_result {
 public:

  KademliaService_Ping_result() {
  }

  virtual ~KademliaService_Ping_result() throw() {}

  kad::PingResponse success;

  _KademliaService_Ping_result__isset __isset;

  bool operator == (const KademliaService_Ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Ping_presult__isset {
  _KademliaService_Ping_presult__isset() : success(false) {}
  bool success;
} _KademliaService_Ping_presult__isset;

class KademliaService_Ping_presult {
 public:


  virtual ~KademliaService_Ping_presult() throw() {}

  kad::PingResponse* success;

  _KademliaService_Ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_FindValue_args__isset {
  _KademliaService_FindValue_args__isset() : request(false) {}
  bool request;
} _KademliaService_FindValue_args__isset;

class KademliaService_FindValue_args {
 public:

  KademliaService_FindValue_args() {
  }

  virtual ~KademliaService_FindValue_args() throw() {}

  kad::FindRequest request;

  _KademliaService_FindValue_args__isset __isset;

  bool operator == (const KademliaService_FindValue_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_FindValue_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_FindValue_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_FindValue_pargs {
 public:


  virtual ~KademliaService_FindValue_pargs() throw() {}

  const kad::FindRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_FindValue_result__isset {
  _KademliaService_FindValue_result__isset() : success(false) {}
  bool success;
} _KademliaService_FindValue_result__isset;

class KademliaService_FindValue_result {
 public:

  KademliaService_FindValue_result() {
  }

  virtual ~KademliaService_FindValue_result() throw() {}

  kad::FindResponse success;

  _KademliaService_FindValue_result__isset __isset;

  bool operator == (const KademliaService_FindValue_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_FindValue_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_FindValue_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_FindValue_presult__isset {
  _KademliaService_FindValue_presult__isset() : success(false) {}
  bool success;
} _KademliaService_FindValue_presult__isset;

class KademliaService_FindValue_presult {
 public:


  virtual ~KademliaService_FindValue_presult() throw() {}

  kad::FindResponse* success;

  _KademliaService_FindValue_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_FindNode_args__isset {
  _KademliaService_FindNode_args__isset() : request(false) {}
  bool request;
} _KademliaService_FindNode_args__isset;

class KademliaService_FindNode_args {
 public:

  KademliaService_FindNode_args() {
  }

  virtual ~KademliaService_FindNode_args() throw() {}

  kad::FindRequest request;

  _KademliaService_FindNode_args__isset __isset;

  bool operator == (const KademliaService_FindNode_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_FindNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_FindNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_FindNode_pargs {
 public:


  virtual ~KademliaService_FindNode_pargs() throw() {}

  const kad::FindRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_FindNode_result__isset {
  _KademliaService_FindNode_result__isset() : success(false) {}
  bool success;
} _KademliaService_FindNode_result__isset;

class KademliaService_FindNode_result {
 public:

  KademliaService_FindNode_result() {
  }

  virtual ~KademliaService_FindNode_result() throw() {}

  kad::FindResponse success;

  _KademliaService_FindNode_result__isset __isset;

  bool operator == (const KademliaService_FindNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_FindNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_FindNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_FindNode_presult__isset {
  _KademliaService_FindNode_presult__isset() : success(false) {}
  bool success;
} _KademliaService_FindNode_presult__isset;

class KademliaService_FindNode_presult {
 public:


  virtual ~KademliaService_FindNode_presult() throw() {}

  kad::FindResponse* success;

  _KademliaService_FindNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_Store_args__isset {
  _KademliaService_Store_args__isset() : request(false) {}
  bool request;
} _KademliaService_Store_args__isset;

class KademliaService_Store_args {
 public:

  KademliaService_Store_args() {
  }

  virtual ~KademliaService_Store_args() throw() {}

  kad::StoreRequest request;

  _KademliaService_Store_args__isset __isset;

  bool operator == (const KademliaService_Store_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Store_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Store_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_Store_pargs {
 public:


  virtual ~KademliaService_Store_pargs() throw() {}

  const kad::StoreRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Store_result__isset {
  _KademliaService_Store_result__isset() : success(false) {}
  bool success;
} _KademliaService_Store_result__isset;

class KademliaService_Store_result {
 public:

  KademliaService_Store_result() {
  }

  virtual ~KademliaService_Store_result() throw() {}

  kad::StoreResponse success;

  _KademliaService_Store_result__isset __isset;

  bool operator == (const KademliaService_Store_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Store_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Store_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Store_presult__isset {
  _KademliaService_Store_presult__isset() : success(false) {}
  bool success;
} _KademliaService_Store_presult__isset;

class KademliaService_Store_presult {
 public:


  virtual ~KademliaService_Store_presult() throw() {}

  kad::StoreResponse* success;

  _KademliaService_Store_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_Downlist_args__isset {
  _KademliaService_Downlist_args__isset() : request(false) {}
  bool request;
} _KademliaService_Downlist_args__isset;

class KademliaService_Downlist_args {
 public:

  KademliaService_Downlist_args() {
  }

  virtual ~KademliaService_Downlist_args() throw() {}

  kad::DownlistRequest request;

  _KademliaService_Downlist_args__isset __isset;

  bool operator == (const KademliaService_Downlist_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Downlist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Downlist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_Downlist_pargs {
 public:


  virtual ~KademliaService_Downlist_pargs() throw() {}

  const kad::DownlistRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Downlist_result__isset {
  _KademliaService_Downlist_result__isset() : success(false) {}
  bool success;
} _KademliaService_Downlist_result__isset;

class KademliaService_Downlist_result {
 public:

  KademliaService_Downlist_result() {
  }

  virtual ~KademliaService_Downlist_result() throw() {}

  kad::DownlistResponse success;

  _KademliaService_Downlist_result__isset __isset;

  bool operator == (const KademliaService_Downlist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Downlist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Downlist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Downlist_presult__isset {
  _KademliaService_Downlist_presult__isset() : success(false) {}
  bool success;
} _KademliaService_Downlist_presult__isset;

class KademliaService_Downlist_presult {
 public:


  virtual ~KademliaService_Downlist_presult() throw() {}

  kad::DownlistResponse* success;

  _KademliaService_Downlist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_Bootstrap_args__isset {
  _KademliaService_Bootstrap_args__isset() : request(false) {}
  bool request;
} _KademliaService_Bootstrap_args__isset;

class KademliaService_Bootstrap_args {
 public:

  KademliaService_Bootstrap_args() {
  }

  virtual ~KademliaService_Bootstrap_args() throw() {}

  kad::BootstrapRequest request;

  _KademliaService_Bootstrap_args__isset __isset;

  bool operator == (const KademliaService_Bootstrap_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Bootstrap_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Bootstrap_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_Bootstrap_pargs {
 public:


  virtual ~KademliaService_Bootstrap_pargs() throw() {}

  const kad::BootstrapRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Bootstrap_result__isset {
  _KademliaService_Bootstrap_result__isset() : success(false) {}
  bool success;
} _KademliaService_Bootstrap_result__isset;

class KademliaService_Bootstrap_result {
 public:

  KademliaService_Bootstrap_result() {
  }

  virtual ~KademliaService_Bootstrap_result() throw() {}

  kad::BootstrapResponse success;

  _KademliaService_Bootstrap_result__isset __isset;

  bool operator == (const KademliaService_Bootstrap_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Bootstrap_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Bootstrap_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Bootstrap_presult__isset {
  _KademliaService_Bootstrap_presult__isset() : success(false) {}
  bool success;
} _KademliaService_Bootstrap_presult__isset;

class KademliaService_Bootstrap_presult {
 public:


  virtual ~KademliaService_Bootstrap_presult() throw() {}

  kad::BootstrapResponse* success;

  _KademliaService_Bootstrap_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_Delete_args__isset {
  _KademliaService_Delete_args__isset() : request(false) {}
  bool request;
} _KademliaService_Delete_args__isset;

class KademliaService_Delete_args {
 public:

  KademliaService_Delete_args() {
  }

  virtual ~KademliaService_Delete_args() throw() {}

  kad::DeleteRequest request;

  _KademliaService_Delete_args__isset __isset;

  bool operator == (const KademliaService_Delete_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_Delete_pargs {
 public:


  virtual ~KademliaService_Delete_pargs() throw() {}

  const kad::DeleteRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Delete_result__isset {
  _KademliaService_Delete_result__isset() : success(false) {}
  bool success;
} _KademliaService_Delete_result__isset;

class KademliaService_Delete_result {
 public:

  KademliaService_Delete_result() {
  }

  virtual ~KademliaService_Delete_result() throw() {}

  kad::DeleteResponse success;

  _KademliaService_Delete_result__isset __isset;

  bool operator == (const KademliaService_Delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Delete_presult__isset {
  _KademliaService_Delete_presult__isset() : success(false) {}
  bool success;
} _KademliaService_Delete_presult__isset;

class KademliaService_Delete_presult {
 public:


  virtual ~KademliaService_Delete_presult() throw() {}

  kad::DeleteResponse* success;

  _KademliaService_Delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KademliaService_Update_args__isset {
  _KademliaService_Update_args__isset() : request(false) {}
  bool request;
} _KademliaService_Update_args__isset;

class KademliaService_Update_args {
 public:

  KademliaService_Update_args() {
  }

  virtual ~KademliaService_Update_args() throw() {}

  kad::UpdateRequest request;

  _KademliaService_Update_args__isset __isset;

  bool operator == (const KademliaService_Update_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KademliaService_Update_pargs {
 public:


  virtual ~KademliaService_Update_pargs() throw() {}

  const kad::UpdateRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Update_result__isset {
  _KademliaService_Update_result__isset() : success(false) {}
  bool success;
} _KademliaService_Update_result__isset;

class KademliaService_Update_result {
 public:

  KademliaService_Update_result() {
  }

  virtual ~KademliaService_Update_result() throw() {}

  kad::UpdateResponse success;

  _KademliaService_Update_result__isset __isset;

  bool operator == (const KademliaService_Update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KademliaService_Update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KademliaService_Update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KademliaService_Update_presult__isset {
  _KademliaService_Update_presult__isset() : success(false) {}
  bool success;
} _KademliaService_Update_presult__isset;

class KademliaService_Update_presult {
 public:


  virtual ~KademliaService_Update_presult() throw() {}

  kad::UpdateResponse* success;

  _KademliaService_Update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class KademliaServiceClient : virtual public KademliaServiceIf {
 public:
  KademliaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  KademliaServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Ping(kad::PingResponse& _return, const kad::PingRequest& request);
  void send_Ping(const kad::PingRequest& request);
  void recv_Ping(kad::PingResponse& _return);
  void FindValue(kad::FindResponse& _return, const kad::FindRequest& request);
  void send_FindValue(const kad::FindRequest& request);
  void recv_FindValue(kad::FindResponse& _return);
  void FindNode(kad::FindResponse& _return, const kad::FindRequest& request);
  void send_FindNode(const kad::FindRequest& request);
  void recv_FindNode(kad::FindResponse& _return);
  void Store(kad::StoreResponse& _return, const kad::StoreRequest& request);
  void send_Store(const kad::StoreRequest& request);
  void recv_Store(kad::StoreResponse& _return);
  void Downlist(kad::DownlistResponse& _return, const kad::DownlistRequest& request);
  void send_Downlist(const kad::DownlistRequest& request);
  void recv_Downlist(kad::DownlistResponse& _return);
  void Bootstrap(kad::BootstrapResponse& _return, const kad::BootstrapRequest& request);
  void send_Bootstrap(const kad::BootstrapRequest& request);
  void recv_Bootstrap(kad::BootstrapResponse& _return);
  void Delete(kad::DeleteResponse& _return, const kad::DeleteRequest& request);
  void send_Delete(const kad::DeleteRequest& request);
  void recv_Delete(kad::DeleteResponse& _return);
  void Update(kad::UpdateResponse& _return, const kad::UpdateRequest& request);
  void send_Update(const kad::UpdateRequest& request);
  void recv_Update(kad::UpdateResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KademliaServiceProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<KademliaServiceIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (KademliaServiceProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*)> processMap_;
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_FindValue(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_FindNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Store(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Downlist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Bootstrap(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
  void process_Update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot);
 public:
  KademliaServiceProcessor(boost::shared_ptr<KademliaServiceIf> iface) :
    iface_(iface) {
    processMap_["Ping"] = &KademliaServiceProcessor::process_Ping;
    processMap_["FindValue"] = &KademliaServiceProcessor::process_FindValue;
    processMap_["FindNode"] = &KademliaServiceProcessor::process_FindNode;
    processMap_["Store"] = &KademliaServiceProcessor::process_Store;
    processMap_["Downlist"] = &KademliaServiceProcessor::process_Downlist;
    processMap_["Bootstrap"] = &KademliaServiceProcessor::process_Bootstrap;
    processMap_["Delete"] = &KademliaServiceProcessor::process_Delete;
    processMap_["Update"] = &KademliaServiceProcessor::process_Update;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot);
  virtual ~KademliaServiceProcessor() {}
};

class KademliaServiceMultiface : virtual public KademliaServiceIf {
 public:
  KademliaServiceMultiface(std::vector<boost::shared_ptr<KademliaServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KademliaServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<KademliaServiceIf> > ifaces_;
  KademliaServiceMultiface() {}
  void add(boost::shared_ptr<KademliaServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Ping(kad::PingResponse& _return, const kad::PingRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Ping(_return, request);
        return;
      } else {
        ifaces_[i]->Ping(_return, request);
      }
    }
  }

  void FindValue(kad::FindResponse& _return, const kad::FindRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->FindValue(_return, request);
        return;
      } else {
        ifaces_[i]->FindValue(_return, request);
      }
    }
  }

  void FindNode(kad::FindResponse& _return, const kad::FindRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->FindNode(_return, request);
        return;
      } else {
        ifaces_[i]->FindNode(_return, request);
      }
    }
  }

  void Store(kad::StoreResponse& _return, const kad::StoreRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Store(_return, request);
        return;
      } else {
        ifaces_[i]->Store(_return, request);
      }
    }
  }

  void Downlist(kad::DownlistResponse& _return, const kad::DownlistRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Downlist(_return, request);
        return;
      } else {
        ifaces_[i]->Downlist(_return, request);
      }
    }
  }

  void Bootstrap(kad::BootstrapResponse& _return, const kad::BootstrapRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Bootstrap(_return, request);
        return;
      } else {
        ifaces_[i]->Bootstrap(_return, request);
      }
    }
  }

  void Delete(kad::DeleteResponse& _return, const kad::DeleteRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Delete(_return, request);
        return;
      } else {
        ifaces_[i]->Delete(_return, request);
      }
    }
  }

  void Update(kad::UpdateResponse& _return, const kad::UpdateRequest& request) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->Update(_return, request);
        return;
      } else {
        ifaces_[i]->Update(_return, request);
      }
    }
  }

};

} // namespace

#endif
