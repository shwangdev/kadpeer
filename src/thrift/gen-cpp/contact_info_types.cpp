/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "contact_info_types.h"

namespace kad {

const char* ContactInfo::ascii_fingerprint = "457181BECBF275C1D1D18F73C238083C";
const uint8_t ContactInfo::binary_fingerprint[16] = {0x45,0x71,0x81,0xBE,0xCB,0xF2,0x75,0xC1,0xD1,0xD1,0x8F,0x73,0xC2,0x38,0x08,0x3C};

uint32_t ContactInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->local_ip);
          this->__isset.local_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->local_port);
          this->__isset.local_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->rendezvous_ip);
          this->__isset.rendezvous_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rendezvous_port);
          this->__isset.rendezvous_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContactInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContactInfo");
  xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->node_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.local_ip) {
    xfer += oprot->writeFieldBegin("local_ip", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->local_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.local_port) {
    xfer += oprot->writeFieldBegin("local_port", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->local_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rendezvous_ip) {
    xfer += oprot->writeFieldBegin("rendezvous_ip", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->rendezvous_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rendezvous_port) {
    xfer += oprot->writeFieldBegin("rendezvous_port", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->rendezvous_port);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
