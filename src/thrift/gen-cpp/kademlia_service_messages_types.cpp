/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "kademlia_service_messages_types.h"

namespace kad {

const char* PingRequest::ascii_fingerprint = "B124875FD2E410C9174324EBC9B5D6CF";
const uint8_t PingRequest::binary_fingerprint[16] = {0xB1,0x24,0x87,0x5F,0xD2,0xE4,0x10,0xC9,0x17,0x43,0x24,0xEB,0xC9,0xB5,0xD6,0xCF};

uint32_t PingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ping);
          this->__isset.ping = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender_info.read(iprot);
          this->__isset.sender_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PingRequest");
  xfer += oprot->writeFieldBegin("ping", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ping);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sender_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sender_info.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* PingResponse::ascii_fingerprint = "4BF81DD46A7371532E49811022D58D36";
const uint8_t PingResponse::binary_fingerprint[16] = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

uint32_t PingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->echo);
          this->__isset.echo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PingResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.echo) {
    xfer += oprot->writeFieldBegin("echo", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->echo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* FindRequest::ascii_fingerprint = "A5716409383E885C499DCC0AAF853BF5";
const uint8_t FindRequest::binary_fingerprint[16] = {0xA5,0x71,0x64,0x09,0x38,0x3E,0x88,0x5C,0x49,0x9D,0xCC,0x0A,0xAF,0x85,0x3B,0xF5};

uint32_t FindRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender_info.read(iprot);
          this->__isset.sender_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_boostrap);
          this->__isset.is_boostrap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sender_ext_ip);
          this->__isset.sender_ext_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sender_ext_port);
          this->__isset.sender_ext_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FindRequest");
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sender_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sender_info.write(oprot);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.is_boostrap) {
    xfer += oprot->writeFieldBegin("is_boostrap", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->is_boostrap);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sender_ext_ip) {
    xfer += oprot->writeFieldBegin("sender_ext_ip", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sender_ext_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sender_ext_port) {
    xfer += oprot->writeFieldBegin("sender_ext_port", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->sender_ext_port);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* FindResponse::ascii_fingerprint = "0B33A1108B56325B1B13DADA6E7C51A3";
const uint8_t FindResponse::binary_fingerprint[16] = {0x0B,0x33,0xA1,0x10,0x8B,0x56,0x32,0x5B,0x1B,0x13,0xDA,0xDA,0x6E,0x7C,0x51,0xA3};

uint32_t FindResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->closest_nodes.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->closest_nodes.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->closest_nodes[_i4].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.closest_nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->values.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->values[_i9]);
            }
            iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->signed_values.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            iprot->readListBegin(_etype13, _size10);
            this->signed_values.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += this->signed_values[_i14].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.signed_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->alternative_value_holder.read(iprot);
          this->__isset.alternative_value_holder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->needs_cache_copy);
          this->__isset.needs_cache_copy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->requester_ext_addr);
          this->__isset.requester_ext_addr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FindResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("closest_nodes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->closest_nodes.size());
    std::vector<kad::ContactInfo> ::const_iterator _iter15;
    for (_iter15 = this->closest_nodes.begin(); _iter15 != this->closest_nodes.end(); ++_iter15)
    {
      xfer += (*_iter15).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->values.size());
    std::vector<std::string> ::const_iterator _iter16;
    for (_iter16 = this->values.begin(); _iter16 != this->values.end(); ++_iter16)
    {
      xfer += oprot->writeString((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("signed_values", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->signed_values.size());
    std::vector<kad::SignedValue> ::const_iterator _iter17;
    for (_iter17 = this->signed_values.begin(); _iter17 != this->signed_values.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  if (this->__isset.alternative_value_holder) {
    xfer += oprot->writeFieldBegin("alternative_value_holder", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->alternative_value_holder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.needs_cache_copy) {
    xfer += oprot->writeFieldBegin("needs_cache_copy", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->needs_cache_copy);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.requester_ext_addr) {
    xfer += oprot->writeFieldBegin("requester_ext_addr", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->requester_ext_addr);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* FindNodeResult::ascii_fingerprint = "4BF81DD46A7371532E49811022D58D36";
const uint8_t FindNodeResult::binary_fingerprint[16] = {0x4B,0xF8,0x1D,0xD4,0x6A,0x73,0x71,0x53,0x2E,0x49,0x81,0x10,0x22,0xD5,0x8D,0x36};

uint32_t FindNodeResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contact);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FindNodeResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("FindNodeResult");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.contact) {
    xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->contact);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StoreRequest::ascii_fingerprint = "0C6EB76C444807DF8546533B5AE87125";
const uint8_t StoreRequest::binary_fingerprint[16] = {0x0C,0x6E,0xB7,0x6C,0x44,0x48,0x07,0xDF,0x85,0x46,0x53,0x3B,0x5A,0xE8,0x71,0x25};

uint32_t StoreRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sig_value.read(iprot);
          this->__isset.sig_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender_info.read(iprot);
          this->__isset.sender_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->publish);
          this->__isset.publish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->signed_request.read(iprot);
          this->__isset.signed_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StoreRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoreRequest");
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.value) {
    xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->value);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sig_value) {
    xfer += oprot->writeFieldBegin("sig_value", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->sig_value.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ttl);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sender_info", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->sender_info.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("publish", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->publish);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.signed_request) {
    xfer += oprot->writeFieldBegin("signed_request", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->signed_request.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* StoreResponse::ascii_fingerprint = "4599D2A22DAAC6D75396642A6A886FAE";
const uint8_t StoreResponse::binary_fingerprint[16] = {0x45,0x99,0xD2,0xA2,0x2D,0xAA,0xC6,0xD7,0x53,0x96,0x64,0x2A,0x6A,0x88,0x6F,0xAE};

uint32_t StoreResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->signed_request.read(iprot);
          this->__isset.signed_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StoreResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoreResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.signed_request) {
    xfer += oprot->writeFieldBegin("signed_request", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->signed_request.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DownlistRequest::ascii_fingerprint = "057BE37F71643E0F152B9B3CD12EEE01";
const uint8_t DownlistRequest::binary_fingerprint[16] = {0x05,0x7B,0xE3,0x7F,0x71,0x64,0x3E,0x0F,0x15,0x2B,0x9B,0x3C,0xD1,0x2E,0xEE,0x01};

uint32_t DownlistRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->downlist.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            iprot->readListBegin(_etype21, _size18);
            this->downlist.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->downlist[_i22].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.downlist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender_info.read(iprot);
          this->__isset.sender_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownlistRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownlistRequest");
  xfer += oprot->writeFieldBegin("downlist", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->downlist.size());
    std::vector<kad::ContactInfo> ::const_iterator _iter23;
    for (_iter23 = this->downlist.begin(); _iter23 != this->downlist.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sender_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->sender_info.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DownlistResponse::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t DownlistResponse::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t DownlistResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DownlistResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DownlistResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BootstrapRequest::ascii_fingerprint = "0874C2BFB0A4B3FC6DB35F09B978D424";
const uint8_t BootstrapRequest::binary_fingerprint[16] = {0x08,0x74,0xC2,0xBF,0xB0,0xA4,0xB3,0xFC,0x6D,0xB3,0x5F,0x09,0xB9,0x78,0xD4,0x24};

uint32_t BootstrapRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newcomer_id);
          this->__isset.newcomer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newcomer_local_ip);
          this->__isset.newcomer_local_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newcomer_local_port);
          this->__isset.newcomer_local_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->node_type);
          this->__isset.node_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newcomer_ext_ip);
          this->__isset.newcomer_ext_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newcomer_ext_port);
          this->__isset.newcomer_ext_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BootstrapRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BootstrapRequest");
  xfer += oprot->writeFieldBegin("newcomer_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->newcomer_id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newcomer_local_ip", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->newcomer_local_ip);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("newcomer_local_port", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->newcomer_local_port);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("node_type", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->node_type);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.newcomer_ext_ip) {
    xfer += oprot->writeFieldBegin("newcomer_ext_ip", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->newcomer_ext_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newcomer_ext_port) {
    xfer += oprot->writeFieldBegin("newcomer_ext_port", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->newcomer_ext_port);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BootstrapResponse::ascii_fingerprint = "CBE249FEAC2BB737776A77DB88635356";
const uint8_t BootstrapResponse::binary_fingerprint[16] = {0xCB,0xE2,0x49,0xFE,0xAC,0x2B,0xB7,0x37,0x77,0x6A,0x77,0xDB,0x88,0x63,0x53,0x56};

uint32_t BootstrapResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->bootstrap_id);
          this->__isset.bootstrap_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->newcomer_ext_ip);
          this->__isset.newcomer_ext_ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->newcomer_ext_port);
          this->__isset.newcomer_ext_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->nat_type);
          this->__isset.nat_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BootstrapResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BootstrapResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.bootstrap_id) {
    xfer += oprot->writeFieldBegin("bootstrap_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->bootstrap_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newcomer_ext_ip) {
    xfer += oprot->writeFieldBegin("newcomer_ext_ip", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->newcomer_ext_ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newcomer_ext_port) {
    xfer += oprot->writeFieldBegin("newcomer_ext_port", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->newcomer_ext_port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nat_type) {
    xfer += oprot->writeFieldBegin("nat_type", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->nat_type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DeleteRequest::ascii_fingerprint = "DFE2E3B0DDF46A49C5F5309AE3A5096B";
const uint8_t DeleteRequest::binary_fingerprint[16] = {0xDF,0xE2,0xE3,0xB0,0xDD,0xF4,0x6A,0x49,0xC5,0xF5,0x30,0x9A,0xE3,0xA5,0x09,0x6B};

uint32_t DeleteRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->value.read(iprot);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->signed_request.read(iprot);
          this->__isset.signed_request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender_info.read(iprot);
          this->__isset.sender_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeleteRequest");
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->value.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("signed_request", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->signed_request.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sender_info", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->sender_info.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DeleteResponse::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t DeleteResponse::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t DeleteResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeleteResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeleteResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UpdateRequest::ascii_fingerprint = "4FA77E37173C59B45221E40E34BFE2AC";
const uint8_t UpdateRequest::binary_fingerprint[16] = {0x4F,0xA7,0x7E,0x37,0x17,0x3C,0x59,0xB4,0x52,0x21,0xE4,0x0E,0x34,0xBF,0xE2,0xAC};

uint32_t UpdateRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->new_value.read(iprot);
          this->__isset.new_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->old_value.read(iprot);
          this->__isset.old_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->request.read(iprot);
          this->__isset.request = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sender_info.read(iprot);
          this->__isset.sender_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateRequest");
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("new_value", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->new_value.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("old_value", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->old_value.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->ttl);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("request", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->request.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("sender_info", ::apache::thrift::protocol::T_STRUCT, 6);
  xfer += this->sender_info.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UpdateResponse::ascii_fingerprint = "5B708A954C550ECA9C1A49D3C5CAFAB9";
const uint8_t UpdateResponse::binary_fingerprint[16] = {0x5B,0x70,0x8A,0x95,0x4C,0x55,0x0E,0xCA,0x9C,0x1A,0x49,0xD3,0xC5,0xCA,0xFA,0xB9};

uint32_t UpdateResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->node_id);
          this->__isset.node_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateResponse");
  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.node_id) {
    xfer += oprot->writeFieldBegin("node_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->node_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

} // namespace
