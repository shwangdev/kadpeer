// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "KademliaService.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace kad;

class KademliaServiceHandler : virtual public KademliaServiceIf {
 public:
  KademliaServiceHandler() {
    // Your initialization goes here
  }

  void Ping(kad::PingResponse& _return, const kad::PingRequest& request) {
    // Your implementation goes here
    printf("Ping\n");
  }

  void FindValue(kad::FindResponse& _return, const kad::FindRequest& request) {
    // Your implementation goes here
    printf("FindValue\n");
  }

  void FindNode(kad::FindResponse& _return, const kad::FindRequest& request) {
    // Your implementation goes here
    printf("FindNode\n");
  }

  void Store(kad::StoreResponse& _return, const kad::StoreRequest& request) {
    // Your implementation goes here
    printf("Store\n");
  }

  void Downlist(kad::DownlistResponse& _return, const kad::DownlistRequest& request) {
    // Your implementation goes here
    printf("Downlist\n");
  }

  void Bootstrap(kad::BootstrapResponse& _return, const kad::BootstrapRequest& request) {
    // Your implementation goes here
    printf("Bootstrap\n");
  }

  void Delete(kad::DeleteResponse& _return, const kad::DeleteRequest& request) {
    // Your implementation goes here
    printf("Delete\n");
  }

  void Update(kad::UpdateResponse& _return, const kad::UpdateRequest& request) {
    // Your implementation goes here
    printf("Update\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<KademliaServiceHandler> handler(new KademliaServiceHandler());
  shared_ptr<TProcessor> processor(new KademliaServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

