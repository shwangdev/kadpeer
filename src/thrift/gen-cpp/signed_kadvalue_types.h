/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef signed_kadvalue_TYPES_H
#define signed_kadvalue_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace kad {

typedef struct _SignedValue__isset {
  _SignedValue__isset() : value(false), value_signature(false) {}
  bool value;
  bool value_signature;
} _SignedValue__isset;

class SignedValue {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  SignedValue() : value(""), value_signature("") {
  }

  virtual ~SignedValue() throw() {}

  std::string value;
  std::string value_signature;

  _SignedValue__isset __isset;

  bool operator == (const SignedValue & rhs) const
  {
    if (!(value == rhs.value))
      return false;
    if (!(value_signature == rhs.value_signature))
      return false;
    return true;
  }
  bool operator != (const SignedValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignedValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SignedRequest__isset {
  _SignedRequest__isset() : signer_id(false), public_key(false), signed_public_key(false), signed_request(false) {}
  bool signer_id;
  bool public_key;
  bool signed_public_key;
  bool signed_request;
} _SignedRequest__isset;

class SignedRequest {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  SignedRequest() : signer_id(""), public_key(""), signed_public_key(""), signed_request("") {
  }

  virtual ~SignedRequest() throw() {}

  std::string signer_id;
  std::string public_key;
  std::string signed_public_key;
  std::string signed_request;

  _SignedRequest__isset __isset;

  bool operator == (const SignedRequest & rhs) const
  {
    if (!(signer_id == rhs.signer_id))
      return false;
    if (!(public_key == rhs.public_key))
      return false;
    if (!(signed_public_key == rhs.signed_public_key))
      return false;
    if (!(signed_request == rhs.signed_request))
      return false;
    return true;
  }
  bool operator != (const SignedRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SignedRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

} // namespace

#endif
